install.packages('plotly')
install.packages('plotly')
library(pot_ly)
library(potly)
library(plotly)
pot_ly(y = ~rnorm(50), type = "box", boxpoints = "all", jitter = 0.3,pointpos = -1.8)
plotly(y = ~rnorm(50), type = "box", boxpoints = "all", jitter = 0.3,pointpos = -1.8)
plot_ly(y = ~rnorm(50), type = "box", boxpoints = "all", jitter = 0.3,pointpos = -1.8)
rrstudio::versionInfo()
rstudio::versionInfo()
versionInfo()
version()
version
version
getwd(
)
read.csv('winequality-white.csv', sep=';
')
read.csv('winequality-white.csv', sep=';')
teste = read.csv('winequality-white.csv', sep=';')
head(teste)
lm(quality ~ ., data=teste)
data
teste
mean(teste)
apply(teste,mean)
apply(teste,2, mean)
m = apply(teste,2, mean)
sd = apply(teste,2, sd)
teste - m/sd
sd
sd
m
teste$quality
(teste - m)/sd
teste2 = (teste - m)/sd
head(teste2$quality)
(teste$quality - m$quality)
m
m['quality']
(teste$quality - m['quality'])
sd['quality']
(teste$quality - m['quality'])/sd['quality']
teste$quality
teste2$quality
scale(teste)
teste2 = scale(teste)
summary(teste2)
lm(quality ~ ., data=teste)
summary(lm(quality ~ ., data=teste))
summary(lm(quality ~ ., data=teste2))
as.data.frame(teste2)
summary(lm(quality ~ ., data=teste))
summary(lm(quality ~ ., data=as.data.frame(teste)))
summary(lm(quality ~ ., data=as.data.frame(teste2)))
data(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
View(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
train<- window(AirPassengers,end=1958.99)
test <- window(AirPassengers, start = 1959)
fit <- auto.arima(train)
autoplot(forecast(fit,h=20))
AP <- AirPassengers
AP
start(AP)
end(AP)
frequency(AP)
plot(AP)
abline(reg=lm(AP~time(AP)))
cycle(AP)
plot(aggregate(AP,FUN=mean))
boxplot(AP~cycle(AP))
library(reshape2)
rm(xsamp2)
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==1] <- "Jan"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==2] <- "Feb"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==3] <- "Mar"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==4] <- "Apr"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==5] <- "May"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==6] <- "Jun"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==7] <- "Jul"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==8] <- "Aug"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==9] <- "Sep"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==10] <- "Oct"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==11] <- "Nov"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==12] <- "Dec"
Monthly_GMV_dimensional<-acast(Monthly.GMV_from.2014, year~month, value.var="GMV")
Monthly.GMV_from.2014_name <- Monthly.GMV_from.2014
start(Monthly_GMV_dimensional)
end(Monthly_GMV_dimensional)
plot.ts(Monthly.GMV_from.2014)
Monthly_GMV_dimensional<-acast(Monthly.GMV_from.2014, year~month, value.var="GMV")
plot(AP)
plot.ts(Monthly.GMV_from.2014)
summary(Monthly.GMV_from.2014$GMV)
AP
AirPassengers
Monthly.GMV_from.2014
Monthly_GMV_dimensional
view(AP)
plot(Monthly_GMV_dimensional)
dev.off()
abline(reg=lm(Monthly_GMV_dimensional~time(Monthly_GMV_dimensional)))
cycle(Monthly_GMV_dimensional)
tsdata1<- daily.gmv$GMV
tsdata1
tsData
plot(daily.gmv1)
decomposedRes <- decompose(tsdata1)
daily.gmv1<- daily.gmv
daily.gmv1$month<-NULL
daily.gmv1$day<-NULL
library(plotly)
install.packages("plotly")
library(plotly)
packageVersion('plotly')
plot_ly(daily.gmv1, x = ~year, y = ~GMV, type = 'scatter', mode = 'lines')
Monthly.GMV_from.2014_1 <- Monthly.GMV_from.2014
Monthly.GMV_from.2014_1$ym <- paste(Monthly.GMV_from.2014_1$year,Monthly.GMV_from.2014_1$month)
Monthly.GMV_from.2014_1$year<-NULL
Monthly.GMV_from.2014_1$month <- NULL
Monthly.GMV_from.2014_1$rn <- seq.int(nrow(Monthly.GMV_from.2014_1))
plot_ly( Monthly.GMV_from.2014_1, x = ~rn, y = ~GMV, type = 'scatter', mode = 'lines')
abline(reg=lm(AP~time(Monthly.GMV_from.2014_1)))
#######
x<- Monthly_GMV_after.2014$GMV
myts <- ts(x, start=c(2014, 1), end=c(2018, 6), frequency=12)
plot(myts)
plot(diff(myts),ylab='Differenced GMV')
plot(log10(myts),ylab='Log (GMV)')
plot(diff(log10(myts)),ylab='Differenced Log (GMV)')
par(mfrow = c(1,2))
acf(ts(diff(log10(myts))),main='ACF GMV')
pacf(ts(diff(log10(myts))),main='PACF GMV')
require(forecast)
ARIMAfit = auto.arima(log10(myts), approximation=FALSE,trace=FALSE)
summary(ARIMAfit)
###### ARIMA model applied to the original data
x2<- Monthly_GMV_after.2014_2017$GMV
myts <- ts(x2, start=c(2014, 1), end=c(2017, 12), frequency=12)
train<- window(myts,end=2017.99)
--test <- window(myts, start = 2018)
fit <- auto.arima(train)
coef(fit)
autoplot(forecast(fit,h=20))
summary(forecast(fit,h=6))
accuracy(forecast(fit,h=6), myts3)
y<- Monthly_GMV_after.2014[which(Monthly_GMV_after.2014$year==2018),]
xy<-forecast(fit,h=6)
acc
accuracy(xy[["mean"]], y)
####### ARIMA model applied to the log data
x2<- Monthly_GMV_after.2014_2017$GMV
myts2 <- ts(x2, start=c(2014, 1), end=c(2017, 12), frequency=12)
plot(myts2)
plot(diff(myts2),ylab='Differenced GMV')
plot(log10(myts2),ylab='Log (GMV)')
plot(diff(log10(myts2)),ylab='Differenced Log (GMV)')
par(mfrow = c(1,2))
acf(ts(diff(log10(myts2))),main='ACF GMV')
pacf(ts(diff(log10(myts2))),main='PACF GMV')
require(forecast)
ARIMAfit = auto.arima(log10(myts2), approximation=FALSE,trace=FALSE)
autoplot(forecast(ARIMAfit,h=20))
summary(forecast(ARIMAfit,h=20))
####### STL
x1<- Monthly_GMV_after.2014_2017$GMV
myts1 <- ts(x1, start=c(2014, 1), end=c(2017, 12), frequency=12)
fit1 <- stl(myts1, t.window=12, s.window="periodic", robust=FALSE)
eeadj <- seasadj(fit1)
plot(naive(eeadj), xlab="New orders index")
fcast <- forecast(fit1, method="naive")
plot(fcast, ylab="New orders index")
summary(fcast)
accuracy(beerfit1, beer3)
#######
train<- window(myts1,end=2017.99)
test <- window(myts1, start = 2017)
fit <- auto.arima(train)
coef(fit)
autoplot(forecast(fit,h=20))
summary(forecast(fit,h=20))
#######
abline(reg=lm(myts~time(myts)))
fit <- stl(myts, s.window="period")
plot(fit)
monthplot(myts)
library(forecast)
install.packages('forecast')
fit <- ets(train)
forecast(fit, 20)
########
x2<- Monthly_GMV_after.2014_2017$GMV
myts2 <- ts(x2, start=c(2014, 1), end=c(2017, 12), frequency=12)
GMVfit1 <- meanf(myts2,h=6)
GMVfit2 <- rwf(myts2,h=6)
GMVfit3 <- snaive(myts2,h=6)
autoplot(  GMVfit3)
x3<- Monthly.GMV_from.2014$GMV
myts3 <- ts(x3, start=c(2018, 1),end=c(2018, 6),frequency=12)
accuracy(GMVfit1, myts3)
accuracy(GMVfit2, myts3)
accuracy(GMVfit3, myts3)
#####
plot(GMVfit1, plot.conf=FALSE,
main="Forecasts for quarterly beer production")
lines(GMVfit2$mean,col=2)
lines(GMVfit3$mean,col=3)
plot(myts3)
legend("topright", lty=1, col=c(4,2,3),legend=c("Mean method","Naive method","Seasonal naive method"))
dev.off()
#####
myts2forecasts <- HoltWinters(myts2, gamma=FALSE)
myts2forecasts2 <- forecast(myts2forecasts, h=6)
accuracy(myts2forecasts2, myts3)
autoplot(myts2forecasts2)
install.packages("plotly")
?auto.arima
install.packages()
install.packages('forecast')
?auto.arima
auto.arima(
)
library(forecast)
auto.arima(
)
?auto.arima
install.packages('reshape2')
data(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
View(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
train<- window(AirPassengers,end=1958.99)
test <- window(AirPassengers, start = 1959)
fit <- auto.arima(train)
autoplot(forecast(fit,h=20))
AP <- AirPassengers
AP
start(AP)
end(AP)
frequency(AP)
plot(AP)
abline(reg=lm(AP~time(AP)))
cycle(AP)
plot(aggregate(AP,FUN=mean))
boxplot(AP~cycle(AP))
library(reshape2)
rm(xsamp2)
data(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
View(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
train<- window(AirPassengers,end=1958.99)
test <- window(AirPassengers, start = 1959)
fit <- auto.arima(train)
autoplot(forecast(fit,h=20))
AP <- AirPassengers
AP
start(AP)
end(AP)
frequency(AP)
plot(AP)
abline(reg=lm(AP~time(AP)))
cycle(AP)
plot(aggregate(AP,FUN=mean))
boxplot(AP~cycle(AP))
library(reshape2)
rm(xsamp2)
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==1] <- "Jan"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==2] <- "Feb"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==3] <- "Mar"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==4] <- "Apr"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==5] <- "May"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==6] <- "Jun"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==7] <- "Jul"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==8] <- "Aug"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==9] <- "Sep"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==10] <- "Oct"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==11] <- "Nov"
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==12] <- "Dec"
Monthly_GMV_dimensional<-acast(Monthly.GMV_from.2014, year~month, value.var="GMV")
Monthly.GMV_from.2014_name <- Monthly.GMV_from.2014
start(Monthly_GMV_dimensional)
end(Monthly_GMV_dimensional)
plot.ts(Monthly.GMV_from.2014)
Monthly.GMV_from.2014$month[Monthly.GMV_from.2014$month==1] <- "Jan"
Box.test()
View(Box.test
)
View(acf)
as.integer(3.9)
?seq.int
View(diff
)
?diff
library(jsonlite)
getwd()
fromJSON('tweets.json', simplifyDataFrame=TRUE)
df = fromJSON('tweets.json', simplifyDataFrame=TRUE)
View(df)
View(df)
View(df)
test %in% c('caio')
test = 'caio'
test %in% c('caio')
test = 'caio ca'
test %in% c('caio')
getwd()
setwd("/Users/caiomiyashiro/Documents/Jupyter\ Notebooks/Exploratory\ Data\ Analysis/PCA")
df <- read.csv('data_PCA_Decathlon.csv', sep=';')
df
View(df)
getwd()
setwd("/Users/caiomiyashiro/Documents/Jupyter\ Notebooks/Exploratory\ Data\ Analysis/PCA")
df <- read.csv('data_PCA_Decathlon.csv', sep=';', row.names = TRUE)
df
View(df)
getwd()
setwd("/Users/caiomiyashiro/Documents/Jupyter\ Notebooks/Exploratory\ Data\ Analysis/PCA")
df <- read.csv('data_PCA_Decathlon.csv', sep=';', row.names = T)
getwd()
setwd("/Users/caiomiyashiro/Documents/Jupyter\ Notebooks/Exploratory\ Data\ Analysis/PCA")
df <- read.csv('data_PCA_Decathlon.csv', sep=';', row.names = 1)
df
View(df)
install.packages('factoMineR')
install.packages('FactoMineR
')
install.packages('FactoMineR')
library(FactoMineR)
res <- pca(df[,1:10])
summary(res)
res <- PCA(df[,1:10])
summary(res)
res <- prcomp(df[,1:10], center = TRUE, scale. = TRUE)
summary(res)
res
